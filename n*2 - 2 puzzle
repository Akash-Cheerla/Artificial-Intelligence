
#an 7-puzzle solver using A* algorithm (i.e) n=3 with 2 blank spaces(n2 - 1)
#import all the necessary libraries
from heapq import heappush, heappop
from random import shuffle
import time

# class <solver> represents a state which possess informations like
# <initial_state> which is the coordinate of current position of the empty block,

class Solver:
  def __init__(self, initial_state=None):
    self.initial_state = State(initial_state)
    self.goal = range(1, 16)
#we define a function rebuildpath  
  def _rebuildPath(self, end):
    path = [end]
    state = end.parent
    while state.parent:
      path.append(state)
      state = state.parent
    return path
#here we define solve where a random puzzle is selected and we try to sove it using priorityqueues
  def solve(self):
    openset = PriorityQueue()
    openset.add(self.initial_state)
    closed = set()
    moves = 0
    print 'The Random Puzzle:'
    print openset.peek(), '\n\n'
    start = time.time()
    while openset:
      current = openset.poll()
      if current.values[:-1] == self.goal:
        end = time.time()
        print 'Solution'
        path = self._rebuildPath(current)
        for state in reversed(path):
          print state
          print
        print ' %d movements' % len(path) #total number of movements taken to achieve the goal state  
        break # if requried state is found, then break
      moves += 1
      for state in current.possible_moves(moves):
        if state not in closed:
          openset.add(state)
      closed.add(current)
    else:
      print 'cannot solve!Try another random puzzle!'

# class <State> represents a state which possess informations like
# <values> which is matrix containing the values,
# <goal> which is the final matrix to be obtained,
# <moves> which is action taken by parent to reach this state
# <parent> which is the parent state of this state
class State:
  def __init__(self, values, moves=0, parent=None):
    self.values = values
    self.moves = moves
    self.parent = parent
    self.goal = range(1, 16)
  
  def possible_moves(self, moves):
    i = self.values.index(0)
    if i in [3, 4, 5, 6, 7, 8]:
      new_board = self.values[:]
      new_board[i], new_board[i - 3] = new_board[i - 3], new_board[i]
      yield State(new_board, moves, self)
    if i in [1, 2, 4, 5, 7, 8]:
      new_board = self.values[:]
      new_board[i], new_board[i - 1] = new_board[i - 1], new_board[i]
      yield State(new_board, moves, self)
    if i in [0, 1, 3, 4, 6, 7]:
      new_board = self.values[:]
      new_board[i], new_board[i + 1] = new_board[i + 1], new_board[i]
      yield State(new_board, moves, self)
    if i in [0, 1, 2, 3, 4, 5]:
      new_board = self.values[:]
      new_board[i], new_board[i + 3] = new_board[i + 3], new_board[i]
      yield State(new_board, moves, self)

  def score(self):
    return self._h() + self._g()

  def _h(self):
    return sum([1 if self.values[i] != self.goal[i] else 0 for i in xrange(7)])

  def _g(self):
    return self.moves

  def __cmp__(self, other):
    return self.values == other.values

  def __eq__(self, other):
    return self.__cmp__(other)
 # overriding hashing function
  def __hash__(self):
    return hash(str(self.values))

  def __lt__(self, other):
    return self.score() < other.score()

  def __str__(self):
    return '\n'.join([str(self.values[:3]),
        str(self.values[3:6]),
        str(self.values[6:9])]).replace('[', '').replace(']', '').replace(',', '').replace('0', ' ').replace('8', ' ')
# class <PriorityQueue> represents a state which possess informations like
# <add/push> which tries to push the item into the position
# <poll> which tries to pop the item to arrange 
# <remove> which remove the item and the heapifies
# <len> which gives us the lenght
class PriorityQueue:
  def __init__(self):
    self.pq = []

  def add(self, item):
    heappush(self.pq, item)

  def poll(self):
    return heappop(self.pq)

  def peek(self):
    return self.pq[0]

  def remove(self, item):
    value = self.pq.remove(item)
    heapify(self.pq)
    return value is not None

  def __len__(self):
    return len(self.pq)

#we here declared the puzzle of size 9 which mean n=3
puzzle = range(9)
#as we imported a random package as shuffle thereby we shufffle to 9 numbers to get a random matrix
shuffle(puzzle)
#puzzle = [1, 7, 4, 6, 0, 3, 2, 5, 0]
solver = Solver(puzzle)
solver.solve()
